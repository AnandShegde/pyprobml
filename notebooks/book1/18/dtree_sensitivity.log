An error occurred while executing the following cell:
------------------
# Instability of decision tree classifier in 2d
# Based on https://github.com/ageron/handson-ml2/blob/master/06_decision_trees.ipynb


import numpy as np
import matplotlib.pyplot as plt
import os

try:
    from sklearn.datasets import load_iris
except ModuleNotFoundError:
    %pip install scikit-learn
    from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier

from matplotlib.colors import ListedColormap


def plot_surface(clf, X, y, xnames, ynames):
    n_classes = 3
    plot_step = 0.02
    markers = ["o", "s", "^"]

    plt.figure()
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step))
    plt.tight_layout(h_pad=0.5, w_pad=0.5, pad=2.5)

    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.xlabel(xnames[0])
    plt.ylabel(xnames[1])

    # we pick a color map to match that used by decision tree graphviz
    cmap = ListedColormap(["orange", "green", "purple"])
    # cmap = ListedColormap(['blue', 'orange', 'green'])
    # cmap = ListedColormap(sns.color_palette())
    plot_colors = [cmap(i) for i in range(4)]

    cs = plt.contourf(xx, yy, Z, cmap=cmap, alpha=0.5)
    # Plot the training points
    for i, color, marker in zip(range(n_classes), plot_colors, markers):
        idx = np.where(y == i)
        plt.scatter(
            X[idx, 0], X[idx, 1], label=ynames[i], edgecolor="black", color=color, s=50, cmap=cmap, marker=marker
        )
    plt.legend()


# Iris data, original
iris = load_iris()


# ndx = [0, 2] # sepal length, petal length
ndx = [2, 3]  # petal lenght and width
X = iris.data[:, ndx]
y = iris.target
xnames = [iris.feature_names[i] for i in ndx]
ynames = iris.target_names

tree_clf = DecisionTreeClassifier(max_depth=2, random_state=42)
tree_clf.fit(X, y)

plot_surface(tree_clf, X, y, xnames, ynames)
plt.savefig("figures/dtree_iris_depth2_original.pdf", dpi=300)
plt.show()


# Iris data, perturbed

# Find widest versicolor
ndx = y == 1
X1 = X[ndx, 1]
xmax = X1.max()
# exclude this point
ndx1 = X[:, 1] != xmax
ndx2 = y == 2
not_widest_versicolor = ndx1 | ndx2
X_tweaked = X[not_widest_versicolor]
y_tweaked = y[not_widest_versicolor]

tree_clf_tweaked = DecisionTreeClassifier(max_depth=2, random_state=40)
tree_clf_tweaked.fit(X_tweaked, y_tweaked)

plot_surface(tree_clf_tweaked, X, y, xnames, ynames)

class1 = y == 1
eq_max = X[:, 1] == xmax
ndx_omit = np.where(eq_max & class1)[0]
plt.plot(X[ndx_omit, 0], X[ndx_omit, 1], "r*", markersize=15)

plt.savefig("figures/dtree_iris_depth2_omit_data.pdf", dpi=300)
plt.show()

# iris data, rotated

Xs = X
ys = y

angle = np.pi / 2
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])
Xr = Xs.dot(rotation_matrix)
yr = ys

tree_clf_rot = DecisionTreeClassifier(random_state=42)
tree_clf_rot.fit(Xr, yr)

plot_surface(tree_clf_rot, Xr, yr, xnames, ynames)
plt.savefig("figures/dtree_iris_depth2_rotated.pdf", dpi=300)
plt.show()


## Ensemble of tree fit to original and tweaked data

if 0:
    from sklearn.ensemble import VotingClassifier

    eclf = VotingClassifier(estimators=[("orig", tree_clf), ("tweaked", tree_clf_tweaked)], voting="hard")
    plot_surface(eclf, X, y, xnames, ynames)

try:
    from probml_utils.prefit_voting_classifier import PrefitVotingClassifier
except ModuleNotFoundError:
    %pip install git+https://github.com/probml/probml-utils.git
    from probml_utils.prefit_voting_classifier import PrefitVotingClassifier

eclf = PrefitVotingClassifier(estimators=[("orig", tree_clf), ("tweaked", tree_clf_tweaked)], voting="soft")
plot_surface(eclf, X, y, xnames, ynames)
plt.savefig("figures/dtree_iris_depth2_ensemble.pdf", dpi=300)
plt.show()
------------------

---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
/tmp/ipykernel_2463/690540873.py in <module>
     64 
     65 plot_surface(tree_clf, X, y, xnames, ynames)
---> 66 plt.savefig("figures/dtree_iris_depth2_original.pdf", dpi=300)
     67 plt.show()
     68 

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/pyplot.py in savefig(*args, **kwargs)
    977 def savefig(*args, **kwargs):
    978     fig = gcf()
--> 979     res = fig.savefig(*args, **kwargs)
    980     fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
    981     return res

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/figure.py in savefig(self, fname, transparent, **kwargs)
   3044                         ax.patch._cm_set(facecolor='none', edgecolor='none'))
   3045 
-> 3046             self.canvas.print_figure(fname, **kwargs)
   3047 
   3048     def ginput(self, n=1, timeout=30, show_clicks=True,

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)
   2323                         orientation=orientation,
   2324                         bbox_inches_restore=_bbox_inches_restore,
-> 2325                         **kwargs)
   2326             finally:
   2327                 if bbox_inches and restore_bbox:

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/backend_bases.py in wrapper(*args, **kwargs)
   1646             kwargs.pop(arg)
   1647 
-> 1648         return func(*args, **kwargs)
   1649 
   1650     return wrapper

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/_api/deprecation.py in wrapper(*inner_args, **inner_kwargs)
    387             # Early return in the simple, non-deprecated case (much faster than
    388             # calling bind()).
--> 389             return func(*inner_args, **inner_kwargs)
    390         arguments = signature.bind(*inner_args, **inner_kwargs).arguments
    391         if is_varargs and arguments.get(name):

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in print_pdf(self, filename, dpi, bbox_inches_restore, metadata)
   2781             file = filename._file
   2782         else:
-> 2783             file = PdfFile(filename, metadata=metadata)
   2784         try:
   2785             file.newPage(width, height)

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in __init__(self, filename, metadata)
    652         self.original_file_like = None
    653         self.tell_base = 0
--> 654         fh, opened = cbook.to_filehandle(filename, "wb", return_opened=True)
    655         if not opened:
    656             try:

~/miniconda3/envs/py37/lib/python3.7/site-packages/matplotlib/cbook/__init__.py in to_filehandle(fname, flag, return_opened, encoding)
    449             fh = bz2.BZ2File(fname, flag)
    450         else:
--> 451             fh = open(fname, flag, encoding=encoding)
    452         opened = True
    453     elif hasattr(fname, 'seek'):

FileNotFoundError: [Errno 2] No such file or directory: 'figures/dtree_iris_depth2_original.pdf'
FileNotFoundError: [Errno 2] No such file or directory: 'figures/dtree_iris_depth2_original.pdf'
